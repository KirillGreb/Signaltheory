// Лодка на радиоуправлении с авторазворотом и обработкой команд от камеры
// Режим выбирается в настройках:
// #define MODE "TRANSMITTER"  // Пульт управления
// #define MODE "RECEIVER"     // Лодка

#include <VirtualWire.h>
#include <Servo.h>

// Настройка режима (раскомментируй нужную строку)
#define MODE "TRANSMITTER"
// #define MODE "RECEIVER"

// Общие настройки
#if MODE == "TRANSMITTER"
  // Пульт управления
  #define SPEED_POT_PIN A0
  #define ANGLE_POT_PIN A1
  #define BUTTON_PIN 2
  #define TX_PIN 12
  LiquidCrystal_I2C lcd(0x27, 16, 2);
#else
  // Лодка
  #define MOTOR_PIN 9
  #define RUDDER_PIN 10
  #define RX_PIN 11
  Servo motor;
  Servo rudder;
#endif

// Переменные
int motorSpeed = 90; // 90 - стоп
int rudderAngle = 90; // 90 - прямо
float distance = 0;

void setup() {
  Serial.begin(9600);
  
  #if MODE == "TRANSMITTER"
    // Настройка пульта
    lcd.init();
    lcd.backlight();
    pinMode(BUTTON_PIN, INPUT_PULLUP);
    vw_set_tx_pin(TX_PIN);
    lcd.print("Пульт готов");
  #else
    // Настройка лодки
    motor.attach(MOTOR_PIN);
    rudder.attach(RUDDER_PIN);
    vw_set_rx_pin(RX_PIN);
    vw_rx_start();
    motor.write(90);
    rudder.write(90);
    Serial.println("Лодка готова");
  #endif
  
  vw_setup(2000); // Скорость передачи
}

void loop() {
  #if MODE == "TRANSMITTER"
    // Чтение данных с пульта
    motorSpeed = map(analogRead(SPEED_POT_PIN), 0, 1023, 0, 180);
    rudderAngle = map(analogRead(ANGLE_POT_PIN), 0, 1023, 0, 180);
    
    // Отправка по радио
    if (digitalRead(BUTTON_PIN) == LOW) {
      String data = String(motorSpeed) + "," + String(rudderAngle) + "," + String(distance);
      vw_send((uint8_t*)data.c_str(), data.length());
      vw_wait_tx();
      
      // Вывод на экран
      lcd.clear();
      lcd.print("S:"); lcd.print(motorSpeed);
      lcd.print(" A:"); lcd.print(rudderAngle);
      lcd.setCursor(0, 1);
      lcd.print("Dist:"); lcd.print(distance);
    }
  #else
    // Приём команд + обработка Serial (от камеры)
    handleRadio();
    handleSerial();
  #endif
  
  delay(50);
}

#if MODE == "RECEIVER"
void handleRadio() {
  // Приём данных с пульта
  uint8_t buf[VW_MAX_MESSAGE_LEN];
  uint8_t buflen = VW_MAX_MESSAGE_LEN;
  
  if (vw_get_message(buf, &buflen)) {
    String data;
    for (int i = 0; i < buflen; i++) data += (char)buf[i];
    
    int comma1 = data.indexOf(',');
    int comma2 = data.indexOf(',', comma1+1);
    
    if (comma1 != -1 && comma2 != -1) {
      motorSpeed = data.substring(0, comma1).toInt();
      rudderAngle = data.substring(comma1+1, comma2).toInt();
      distance = data.substring(comma2+1).toFloat();
      
      // Авторазворот при 450м
      if (distance >= 450) {
        rudderAngle = 180;
        motorSpeed = map(motorSpeed, 0, 180, 180, 0);
      }
    }
  }
}

void handleSerial() {
  // Чтение команд от Raspberry Pi
  if (Serial.available() > 0) {
    char cmd = Serial.read();
    switch (cmd) {
      case 'L': rudderAngle = 45; break; // Поворот влево
      case 'R': rudderAngle = 135; break; // Поворот вправо
      case 'F': rudderAngle = 90; break;  // Прямо
    }
  }
  
  // Управление моторами
  motor.write(motorSpeed);
  rudder.write(rudderAngle);
}
#endif
